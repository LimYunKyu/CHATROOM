// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_CHAT;
struct C_CHATDefaultTypeInternal;
extern C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
class C_ENTER_GAME;
struct C_ENTER_GAMEDefaultTypeInternal;
extern C_ENTER_GAMEDefaultTypeInternal _C_ENTER_GAME_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_OTHER_PLAYER_ENTER;
struct C_OTHER_PLAYER_ENTERDefaultTypeInternal;
extern C_OTHER_PLAYER_ENTERDefaultTypeInternal _C_OTHER_PLAYER_ENTER_default_instance_;
class C_OTHER_PLAYER_INFO;
struct C_OTHER_PLAYER_INFODefaultTypeInternal;
extern C_OTHER_PLAYER_INFODefaultTypeInternal _C_OTHER_PLAYER_INFO_default_instance_;
class C_PLAYER_DISCONNECT;
struct C_PLAYER_DISCONNECTDefaultTypeInternal;
extern C_PLAYER_DISCONNECTDefaultTypeInternal _C_PLAYER_DISCONNECT_default_instance_;
class C_PLAYER_INFO;
struct C_PLAYER_INFODefaultTypeInternal;
extern C_PLAYER_INFODefaultTypeInternal _C_PLAYER_INFO_default_instance_;
class S_CHAT;
struct S_CHATDefaultTypeInternal;
extern S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
class S_ENTER_GAME;
struct S_ENTER_GAMEDefaultTypeInternal;
extern S_ENTER_GAMEDefaultTypeInternal _S_ENTER_GAME_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_OTHER_PLAYER_ENTER;
struct S_OTHER_PLAYER_ENTERDefaultTypeInternal;
extern S_OTHER_PLAYER_ENTERDefaultTypeInternal _S_OTHER_PLAYER_ENTER_default_instance_;
class S_OTHER_PLAYER_INFO;
struct S_OTHER_PLAYER_INFODefaultTypeInternal;
extern S_OTHER_PLAYER_INFODefaultTypeInternal _S_OTHER_PLAYER_INFO_default_instance_;
class S_PLAYER_DISCONNECT;
struct S_PLAYER_DISCONNECTDefaultTypeInternal;
extern S_PLAYER_DISCONNECTDefaultTypeInternal _S_PLAYER_DISCONNECT_default_instance_;
class S_PLAYER_INFO;
struct S_PLAYER_INFODefaultTypeInternal;
extern S_PLAYER_INFODefaultTypeInternal _S_PLAYER_INFO_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_CHAT* Arena::CreateMaybeMessage<::Protocol::C_CHAT>(Arena*);
template<> ::Protocol::C_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::C_ENTER_GAME>(Arena*);
template<> ::Protocol::C_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_LOGIN>(Arena*);
template<> ::Protocol::C_OTHER_PLAYER_ENTER* Arena::CreateMaybeMessage<::Protocol::C_OTHER_PLAYER_ENTER>(Arena*);
template<> ::Protocol::C_OTHER_PLAYER_INFO* Arena::CreateMaybeMessage<::Protocol::C_OTHER_PLAYER_INFO>(Arena*);
template<> ::Protocol::C_PLAYER_DISCONNECT* Arena::CreateMaybeMessage<::Protocol::C_PLAYER_DISCONNECT>(Arena*);
template<> ::Protocol::C_PLAYER_INFO* Arena::CreateMaybeMessage<::Protocol::C_PLAYER_INFO>(Arena*);
template<> ::Protocol::S_CHAT* Arena::CreateMaybeMessage<::Protocol::S_CHAT>(Arena*);
template<> ::Protocol::S_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::S_ENTER_GAME>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_OTHER_PLAYER_ENTER* Arena::CreateMaybeMessage<::Protocol::S_OTHER_PLAYER_ENTER>(Arena*);
template<> ::Protocol::S_OTHER_PLAYER_INFO* Arena::CreateMaybeMessage<::Protocol::S_OTHER_PLAYER_INFO>(Arena*);
template<> ::Protocol::S_PLAYER_DISCONNECT* Arena::CreateMaybeMessage<::Protocol::S_PLAYER_DISCONNECT>(Arena*);
template<> ::Protocol::S_PLAYER_INFO* Arena::CreateMaybeMessage<::Protocol::S_PLAYER_INFO>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  ~C_LOGIN() override;
  explicit constexpr C_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN(const C_LOGIN& from);
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_LOGIN* New() const final {
    return new C_LOGIN();
  }

  C_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_LOGIN& from);
  void MergeFrom(const C_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit constexpr S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_LOGIN* New() const final {
    return new S_LOGIN();
  }

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_LOGIN& from);
  void MergeFrom(const S_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated .Protocol.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Protocol::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >*
      mutable_players();
  private:
  const ::Protocol::Player& _internal_players(int index) const;
  ::Protocol::Player* _internal_add_players();
  public:
  const ::Protocol::Player& players(int index) const;
  ::Protocol::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >&
      players() const;

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player > players_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ENTER_GAME) */ {
 public:
  inline C_ENTER_GAME() : C_ENTER_GAME(nullptr) {}
  ~C_ENTER_GAME() override;
  explicit constexpr C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ENTER_GAME(const C_ENTER_GAME& from);
  C_ENTER_GAME(C_ENTER_GAME&& from) noexcept
    : C_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline C_ENTER_GAME& operator=(const C_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ENTER_GAME& operator=(C_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const C_ENTER_GAME*>(
               &_C_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_ENTER_GAME& a, C_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ENTER_GAME* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ENTER_GAME* New() const final {
    return new C_ENTER_GAME();
  }

  C_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ENTER_GAME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ENTER_GAME& from);
  void MergeFrom(const C_ENTER_GAME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ENTER_GAME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ENTER_GAME";
  }
  protected:
  explicit C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
  };
  // uint64 playerIndex = 1;
  void clear_playerindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 playerindex() const;
  void set_playerindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_playerindex() const;
  void _internal_set_playerindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 playerindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ENTER_GAME) */ {
 public:
  inline S_ENTER_GAME() : S_ENTER_GAME(nullptr) {}
  ~S_ENTER_GAME() override;
  explicit constexpr S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ENTER_GAME(const S_ENTER_GAME& from);
  S_ENTER_GAME(S_ENTER_GAME&& from) noexcept
    : S_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline S_ENTER_GAME& operator=(const S_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENTER_GAME& operator=(S_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const S_ENTER_GAME*>(
               &_S_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_ENTER_GAME& a, S_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENTER_GAME* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ENTER_GAME* New() const final {
    return new S_ENTER_GAME();
  }

  S_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ENTER_GAME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ENTER_GAME& from);
  void MergeFrom(const S_ENTER_GAME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ENTER_GAME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ENTER_GAME";
  }
  protected:
  explicit S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHAT) */ {
 public:
  inline C_CHAT() : C_CHAT(nullptr) {}
  ~C_CHAT() override;
  explicit constexpr C_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHAT(const C_CHAT& from);
  C_CHAT(C_CHAT&& from) noexcept
    : C_CHAT() {
    *this = ::std::move(from);
  }

  inline C_CHAT& operator=(const C_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHAT& operator=(C_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_CHAT*>(
               &_C_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_CHAT& a, C_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHAT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_CHAT* New() const final {
    return new C_CHAT();
  }

  C_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_CHAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_CHAT& from);
  void MergeFrom(const C_CHAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHAT";
  }
  protected:
  explicit C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint64 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHAT) */ {
 public:
  inline S_CHAT() : S_CHAT(nullptr) {}
  ~S_CHAT() override;
  explicit constexpr S_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHAT(const S_CHAT& from);
  S_CHAT(S_CHAT&& from) noexcept
    : S_CHAT() {
    *this = ::std::move(from);
  }

  inline S_CHAT& operator=(const S_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHAT& operator=(S_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_CHAT*>(
               &_S_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_CHAT& a, S_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHAT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CHAT* New() const final {
    return new S_CHAT();
  }

  S_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CHAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CHAT& from);
  void MergeFrom(const S_CHAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHAT";
  }
  protected:
  explicit S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint64 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAYER_INFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PLAYER_INFO) */ {
 public:
  inline C_PLAYER_INFO() : C_PLAYER_INFO(nullptr) {}
  ~C_PLAYER_INFO() override;
  explicit constexpr C_PLAYER_INFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAYER_INFO(const C_PLAYER_INFO& from);
  C_PLAYER_INFO(C_PLAYER_INFO&& from) noexcept
    : C_PLAYER_INFO() {
    *this = ::std::move(from);
  }

  inline C_PLAYER_INFO& operator=(const C_PLAYER_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAYER_INFO& operator=(C_PLAYER_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAYER_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAYER_INFO* internal_default_instance() {
    return reinterpret_cast<const C_PLAYER_INFO*>(
               &_C_PLAYER_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_PLAYER_INFO& a, C_PLAYER_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAYER_INFO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAYER_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_PLAYER_INFO* New() const final {
    return new C_PLAYER_INFO();
  }

  C_PLAYER_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_PLAYER_INFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_PLAYER_INFO& from);
  void MergeFrom(const C_PLAYER_INFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PLAYER_INFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PLAYER_INFO";
  }
  protected:
  explicit C_PLAYER_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
    kPlayerStateFieldNumber = 4,
    kPlayerDirFieldNumber = 5,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 posX = 2;
  void clear_posx();
  ::PROTOBUF_NAMESPACE_ID::int64 posx() const;
  void set_posx(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_posx() const;
  void _internal_set_posx(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 posY = 3;
  void clear_posy();
  ::PROTOBUF_NAMESPACE_ID::int64 posy() const;
  void set_posy(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_posy() const;
  void _internal_set_posy(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Protocol.PlayerState playerState = 4;
  void clear_playerstate();
  ::Protocol::PlayerState playerstate() const;
  void set_playerstate(::Protocol::PlayerState value);
  private:
  ::Protocol::PlayerState _internal_playerstate() const;
  void _internal_set_playerstate(::Protocol::PlayerState value);
  public:

  // .Protocol.PlayerDirection playerDir = 5;
  void clear_playerdir();
  ::Protocol::PlayerDirection playerdir() const;
  void set_playerdir(::Protocol::PlayerDirection value);
  private:
  ::Protocol::PlayerDirection _internal_playerdir() const;
  void _internal_set_playerdir(::Protocol::PlayerDirection value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_PLAYER_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 posx_;
  ::PROTOBUF_NAMESPACE_ID::int64 posy_;
  int playerstate_;
  int playerdir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAYER_INFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAYER_INFO) */ {
 public:
  inline S_PLAYER_INFO() : S_PLAYER_INFO(nullptr) {}
  ~S_PLAYER_INFO() override;
  explicit constexpr S_PLAYER_INFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAYER_INFO(const S_PLAYER_INFO& from);
  S_PLAYER_INFO(S_PLAYER_INFO&& from) noexcept
    : S_PLAYER_INFO() {
    *this = ::std::move(from);
  }

  inline S_PLAYER_INFO& operator=(const S_PLAYER_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAYER_INFO& operator=(S_PLAYER_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAYER_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAYER_INFO* internal_default_instance() {
    return reinterpret_cast<const S_PLAYER_INFO*>(
               &_S_PLAYER_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_PLAYER_INFO& a, S_PLAYER_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAYER_INFO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAYER_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PLAYER_INFO* New() const final {
    return new S_PLAYER_INFO();
  }

  S_PLAYER_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PLAYER_INFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PLAYER_INFO& from);
  void MergeFrom(const S_PLAYER_INFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAYER_INFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAYER_INFO";
  }
  protected:
  explicit S_PLAYER_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 posX = 2;
  void clear_posx();
  ::PROTOBUF_NAMESPACE_ID::int64 posx() const;
  void set_posx(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_posx() const;
  void _internal_set_posx(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 posY = 3;
  void clear_posy();
  ::PROTOBUF_NAMESPACE_ID::int64 posy() const;
  void set_posy(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_posy() const;
  void _internal_set_posy(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAYER_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 posx_;
  ::PROTOBUF_NAMESPACE_ID::int64 posy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_OTHER_PLAYER_INFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_OTHER_PLAYER_INFO) */ {
 public:
  inline C_OTHER_PLAYER_INFO() : C_OTHER_PLAYER_INFO(nullptr) {}
  ~C_OTHER_PLAYER_INFO() override;
  explicit constexpr C_OTHER_PLAYER_INFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_OTHER_PLAYER_INFO(const C_OTHER_PLAYER_INFO& from);
  C_OTHER_PLAYER_INFO(C_OTHER_PLAYER_INFO&& from) noexcept
    : C_OTHER_PLAYER_INFO() {
    *this = ::std::move(from);
  }

  inline C_OTHER_PLAYER_INFO& operator=(const C_OTHER_PLAYER_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_OTHER_PLAYER_INFO& operator=(C_OTHER_PLAYER_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_OTHER_PLAYER_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_OTHER_PLAYER_INFO* internal_default_instance() {
    return reinterpret_cast<const C_OTHER_PLAYER_INFO*>(
               &_C_OTHER_PLAYER_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C_OTHER_PLAYER_INFO& a, C_OTHER_PLAYER_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(C_OTHER_PLAYER_INFO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_OTHER_PLAYER_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_OTHER_PLAYER_INFO* New() const final {
    return new C_OTHER_PLAYER_INFO();
  }

  C_OTHER_PLAYER_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_OTHER_PLAYER_INFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_OTHER_PLAYER_INFO& from);
  void MergeFrom(const C_OTHER_PLAYER_INFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_OTHER_PLAYER_INFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_OTHER_PLAYER_INFO";
  }
  protected:
  explicit C_OTHER_PLAYER_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 posX = 2;
  void clear_posx();
  ::PROTOBUF_NAMESPACE_ID::int64 posx() const;
  void set_posx(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_posx() const;
  void _internal_set_posx(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 posY = 3;
  void clear_posy();
  ::PROTOBUF_NAMESPACE_ID::int64 posy() const;
  void set_posy(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_posy() const;
  void _internal_set_posy(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_OTHER_PLAYER_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 posx_;
  ::PROTOBUF_NAMESPACE_ID::int64 posy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_OTHER_PLAYER_INFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OTHER_PLAYER_INFO) */ {
 public:
  inline S_OTHER_PLAYER_INFO() : S_OTHER_PLAYER_INFO(nullptr) {}
  ~S_OTHER_PLAYER_INFO() override;
  explicit constexpr S_OTHER_PLAYER_INFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OTHER_PLAYER_INFO(const S_OTHER_PLAYER_INFO& from);
  S_OTHER_PLAYER_INFO(S_OTHER_PLAYER_INFO&& from) noexcept
    : S_OTHER_PLAYER_INFO() {
    *this = ::std::move(from);
  }

  inline S_OTHER_PLAYER_INFO& operator=(const S_OTHER_PLAYER_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OTHER_PLAYER_INFO& operator=(S_OTHER_PLAYER_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OTHER_PLAYER_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OTHER_PLAYER_INFO* internal_default_instance() {
    return reinterpret_cast<const S_OTHER_PLAYER_INFO*>(
               &_S_OTHER_PLAYER_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_OTHER_PLAYER_INFO& a, S_OTHER_PLAYER_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OTHER_PLAYER_INFO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OTHER_PLAYER_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_OTHER_PLAYER_INFO* New() const final {
    return new S_OTHER_PLAYER_INFO();
  }

  S_OTHER_PLAYER_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_OTHER_PLAYER_INFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_OTHER_PLAYER_INFO& from);
  void MergeFrom(const S_OTHER_PLAYER_INFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OTHER_PLAYER_INFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OTHER_PLAYER_INFO";
  }
  protected:
  explicit S_OTHER_PLAYER_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
    kPlayerStateFieldNumber = 4,
    kPlayerDirFieldNumber = 5,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 posX = 2;
  void clear_posx();
  ::PROTOBUF_NAMESPACE_ID::int64 posx() const;
  void set_posx(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_posx() const;
  void _internal_set_posx(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 posY = 3;
  void clear_posy();
  ::PROTOBUF_NAMESPACE_ID::int64 posy() const;
  void set_posy(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_posy() const;
  void _internal_set_posy(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Protocol.PlayerState playerState = 4;
  void clear_playerstate();
  ::Protocol::PlayerState playerstate() const;
  void set_playerstate(::Protocol::PlayerState value);
  private:
  ::Protocol::PlayerState _internal_playerstate() const;
  void _internal_set_playerstate(::Protocol::PlayerState value);
  public:

  // .Protocol.PlayerDirection playerDir = 5;
  void clear_playerdir();
  ::Protocol::PlayerDirection playerdir() const;
  void set_playerdir(::Protocol::PlayerDirection value);
  private:
  ::Protocol::PlayerDirection _internal_playerdir() const;
  void _internal_set_playerdir(::Protocol::PlayerDirection value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_OTHER_PLAYER_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 posx_;
  ::PROTOBUF_NAMESPACE_ID::int64 posy_;
  int playerstate_;
  int playerdir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_OTHER_PLAYER_ENTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_OTHER_PLAYER_ENTER) */ {
 public:
  inline C_OTHER_PLAYER_ENTER() : C_OTHER_PLAYER_ENTER(nullptr) {}
  ~C_OTHER_PLAYER_ENTER() override;
  explicit constexpr C_OTHER_PLAYER_ENTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_OTHER_PLAYER_ENTER(const C_OTHER_PLAYER_ENTER& from);
  C_OTHER_PLAYER_ENTER(C_OTHER_PLAYER_ENTER&& from) noexcept
    : C_OTHER_PLAYER_ENTER() {
    *this = ::std::move(from);
  }

  inline C_OTHER_PLAYER_ENTER& operator=(const C_OTHER_PLAYER_ENTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_OTHER_PLAYER_ENTER& operator=(C_OTHER_PLAYER_ENTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_OTHER_PLAYER_ENTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_OTHER_PLAYER_ENTER* internal_default_instance() {
    return reinterpret_cast<const C_OTHER_PLAYER_ENTER*>(
               &_C_OTHER_PLAYER_ENTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_OTHER_PLAYER_ENTER& a, C_OTHER_PLAYER_ENTER& b) {
    a.Swap(&b);
  }
  inline void Swap(C_OTHER_PLAYER_ENTER* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_OTHER_PLAYER_ENTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_OTHER_PLAYER_ENTER* New() const final {
    return new C_OTHER_PLAYER_ENTER();
  }

  C_OTHER_PLAYER_ENTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_OTHER_PLAYER_ENTER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_OTHER_PLAYER_ENTER& from);
  void MergeFrom(const C_OTHER_PLAYER_ENTER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_OTHER_PLAYER_ENTER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_OTHER_PLAYER_ENTER";
  }
  protected:
  explicit C_OTHER_PLAYER_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumofotherFieldNumber = 1,
  };
  // uint64 numofother = 1;
  void clear_numofother();
  ::PROTOBUF_NAMESPACE_ID::uint64 numofother() const;
  void set_numofother(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_numofother() const;
  void _internal_set_numofother(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_OTHER_PLAYER_ENTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 numofother_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_OTHER_PLAYER_ENTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OTHER_PLAYER_ENTER) */ {
 public:
  inline S_OTHER_PLAYER_ENTER() : S_OTHER_PLAYER_ENTER(nullptr) {}
  ~S_OTHER_PLAYER_ENTER() override;
  explicit constexpr S_OTHER_PLAYER_ENTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OTHER_PLAYER_ENTER(const S_OTHER_PLAYER_ENTER& from);
  S_OTHER_PLAYER_ENTER(S_OTHER_PLAYER_ENTER&& from) noexcept
    : S_OTHER_PLAYER_ENTER() {
    *this = ::std::move(from);
  }

  inline S_OTHER_PLAYER_ENTER& operator=(const S_OTHER_PLAYER_ENTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OTHER_PLAYER_ENTER& operator=(S_OTHER_PLAYER_ENTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OTHER_PLAYER_ENTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OTHER_PLAYER_ENTER* internal_default_instance() {
    return reinterpret_cast<const S_OTHER_PLAYER_ENTER*>(
               &_S_OTHER_PLAYER_ENTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_OTHER_PLAYER_ENTER& a, S_OTHER_PLAYER_ENTER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OTHER_PLAYER_ENTER* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OTHER_PLAYER_ENTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_OTHER_PLAYER_ENTER* New() const final {
    return new S_OTHER_PLAYER_ENTER();
  }

  S_OTHER_PLAYER_ENTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_OTHER_PLAYER_ENTER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_OTHER_PLAYER_ENTER& from);
  void MergeFrom(const S_OTHER_PLAYER_ENTER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OTHER_PLAYER_ENTER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OTHER_PLAYER_ENTER";
  }
  protected:
  explicit S_OTHER_PLAYER_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 posX = 2;
  void clear_posx();
  ::PROTOBUF_NAMESPACE_ID::int64 posx() const;
  void set_posx(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_posx() const;
  void _internal_set_posx(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 posY = 3;
  void clear_posy();
  ::PROTOBUF_NAMESPACE_ID::int64 posy() const;
  void set_posy(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_posy() const;
  void _internal_set_posy(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_OTHER_PLAYER_ENTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 posx_;
  ::PROTOBUF_NAMESPACE_ID::int64 posy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PLAYER_DISCONNECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PLAYER_DISCONNECT) */ {
 public:
  inline C_PLAYER_DISCONNECT() : C_PLAYER_DISCONNECT(nullptr) {}
  ~C_PLAYER_DISCONNECT() override;
  explicit constexpr C_PLAYER_DISCONNECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PLAYER_DISCONNECT(const C_PLAYER_DISCONNECT& from);
  C_PLAYER_DISCONNECT(C_PLAYER_DISCONNECT&& from) noexcept
    : C_PLAYER_DISCONNECT() {
    *this = ::std::move(from);
  }

  inline C_PLAYER_DISCONNECT& operator=(const C_PLAYER_DISCONNECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PLAYER_DISCONNECT& operator=(C_PLAYER_DISCONNECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PLAYER_DISCONNECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PLAYER_DISCONNECT* internal_default_instance() {
    return reinterpret_cast<const C_PLAYER_DISCONNECT*>(
               &_C_PLAYER_DISCONNECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C_PLAYER_DISCONNECT& a, C_PLAYER_DISCONNECT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PLAYER_DISCONNECT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PLAYER_DISCONNECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_PLAYER_DISCONNECT* New() const final {
    return new C_PLAYER_DISCONNECT();
  }

  C_PLAYER_DISCONNECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_PLAYER_DISCONNECT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_PLAYER_DISCONNECT& from);
  void MergeFrom(const C_PLAYER_DISCONNECT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PLAYER_DISCONNECT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PLAYER_DISCONNECT";
  }
  protected:
  explicit C_PLAYER_DISCONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDisconnectFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool disconnect = 2;
  void clear_disconnect();
  bool disconnect() const;
  void set_disconnect(bool value);
  private:
  bool _internal_disconnect() const;
  void _internal_set_disconnect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_PLAYER_DISCONNECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  bool disconnect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAYER_DISCONNECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAYER_DISCONNECT) */ {
 public:
  inline S_PLAYER_DISCONNECT() : S_PLAYER_DISCONNECT(nullptr) {}
  ~S_PLAYER_DISCONNECT() override;
  explicit constexpr S_PLAYER_DISCONNECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAYER_DISCONNECT(const S_PLAYER_DISCONNECT& from);
  S_PLAYER_DISCONNECT(S_PLAYER_DISCONNECT&& from) noexcept
    : S_PLAYER_DISCONNECT() {
    *this = ::std::move(from);
  }

  inline S_PLAYER_DISCONNECT& operator=(const S_PLAYER_DISCONNECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAYER_DISCONNECT& operator=(S_PLAYER_DISCONNECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAYER_DISCONNECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAYER_DISCONNECT* internal_default_instance() {
    return reinterpret_cast<const S_PLAYER_DISCONNECT*>(
               &_S_PLAYER_DISCONNECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_PLAYER_DISCONNECT& a, S_PLAYER_DISCONNECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAYER_DISCONNECT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAYER_DISCONNECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PLAYER_DISCONNECT* New() const final {
    return new S_PLAYER_DISCONNECT();
  }

  S_PLAYER_DISCONNECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PLAYER_DISCONNECT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PLAYER_DISCONNECT& from);
  void MergeFrom(const S_PLAYER_DISCONNECT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAYER_DISCONNECT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAYER_DISCONNECT";
  }
  protected:
  explicit S_PLAYER_DISCONNECT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDisconnectFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool disconnect = 2;
  void clear_disconnect();
  bool disconnect() const;
  void set_disconnect(bool value);
  private:
  bool _internal_disconnect() const;
  void _internal_set_disconnect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAYER_DISCONNECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  bool disconnect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_LOGIN

// -------------------------------------------------------------------

// S_LOGIN

// bool success = 1;
inline void S_LOGIN::clear_success() {
  success_ = false;
}
inline bool S_LOGIN::_internal_success() const {
  return success_;
}
inline bool S_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.success)
  return _internal_success();
}
inline void S_LOGIN::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.success)
}

// repeated .Protocol.Player players = 2;
inline int S_LOGIN::_internal_players_size() const {
  return players_.size();
}
inline int S_LOGIN::players_size() const {
  return _internal_players_size();
}
inline ::Protocol::Player* S_LOGIN::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >*
S_LOGIN::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_LOGIN.players)
  return &players_;
}
inline const ::Protocol::Player& S_LOGIN::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::Protocol::Player& S_LOGIN::players(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.players)
  return _internal_players(index);
}
inline ::Protocol::Player* S_LOGIN::_internal_add_players() {
  return players_.Add();
}
inline ::Protocol::Player* S_LOGIN::add_players() {
  // @@protoc_insertion_point(field_add:Protocol.S_LOGIN.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::Player >&
S_LOGIN::players() const {
  // @@protoc_insertion_point(field_list:Protocol.S_LOGIN.players)
  return players_;
}

// -------------------------------------------------------------------

// C_ENTER_GAME

// uint64 playerIndex = 1;
inline void C_ENTER_GAME::clear_playerindex() {
  playerindex_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_ENTER_GAME::_internal_playerindex() const {
  return playerindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_ENTER_GAME::playerindex() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_GAME.playerIndex)
  return _internal_playerindex();
}
inline void C_ENTER_GAME::_internal_set_playerindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  playerindex_ = value;
}
inline void C_ENTER_GAME::set_playerindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_playerindex(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ENTER_GAME.playerIndex)
}

// -------------------------------------------------------------------

// S_ENTER_GAME

// bool success = 1;
inline void S_ENTER_GAME::clear_success() {
  success_ = false;
}
inline bool S_ENTER_GAME::_internal_success() const {
  return success_;
}
inline bool S_ENTER_GAME::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.success)
  return _internal_success();
}
inline void S_ENTER_GAME::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_ENTER_GAME::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.success)
}

// -------------------------------------------------------------------

// C_CHAT

// uint64 playerId = 1;
inline void C_CHAT::clear_playerid() {
  playerid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_CHAT::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_CHAT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHAT.playerId)
  return _internal_playerid();
}
inline void C_CHAT::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  playerid_ = value;
}
inline void C_CHAT::set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CHAT.playerId)
}

// string msg = 2;
inline void C_CHAT::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& C_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHAT.msg)
}
inline std::string* C_CHAT::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHAT.msg)
  return _internal_mutable_msg();
}
inline const std::string& C_CHAT::_internal_msg() const {
  return msg_.Get();
}
inline void C_CHAT::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CHAT::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHAT.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHAT.msg)
}

// -------------------------------------------------------------------

// S_CHAT

// uint64 playerId = 1;
inline void S_CHAT::clear_playerid() {
  playerid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_CHAT::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_CHAT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.playerId)
  return _internal_playerid();
}
inline void S_CHAT::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  playerid_ = value;
}
inline void S_CHAT::set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.playerId)
}

// string msg = 2;
inline void S_CHAT::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& S_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.msg)
}
inline std::string* S_CHAT::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHAT.msg)
  return _internal_mutable_msg();
}
inline const std::string& S_CHAT::_internal_msg() const {
  return msg_.Get();
}
inline void S_CHAT::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CHAT::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHAT.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHAT.msg)
}

// -------------------------------------------------------------------

// C_PLAYER_INFO

// uint64 id = 1;
inline void C_PLAYER_INFO::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_PLAYER_INFO::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_PLAYER_INFO::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_INFO.id)
  return _internal_id();
}
inline void C_PLAYER_INFO::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void C_PLAYER_INFO::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAYER_INFO.id)
}

// int64 posX = 2;
inline void C_PLAYER_INFO::clear_posx() {
  posx_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C_PLAYER_INFO::_internal_posx() const {
  return posx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C_PLAYER_INFO::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_INFO.posX)
  return _internal_posx();
}
inline void C_PLAYER_INFO::_internal_set_posx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  posx_ = value;
}
inline void C_PLAYER_INFO::set_posx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAYER_INFO.posX)
}

// int64 posY = 3;
inline void C_PLAYER_INFO::clear_posy() {
  posy_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C_PLAYER_INFO::_internal_posy() const {
  return posy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C_PLAYER_INFO::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_INFO.posY)
  return _internal_posy();
}
inline void C_PLAYER_INFO::_internal_set_posy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  posy_ = value;
}
inline void C_PLAYER_INFO::set_posy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAYER_INFO.posY)
}

// .Protocol.PlayerState playerState = 4;
inline void C_PLAYER_INFO::clear_playerstate() {
  playerstate_ = 0;
}
inline ::Protocol::PlayerState C_PLAYER_INFO::_internal_playerstate() const {
  return static_cast< ::Protocol::PlayerState >(playerstate_);
}
inline ::Protocol::PlayerState C_PLAYER_INFO::playerstate() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_INFO.playerState)
  return _internal_playerstate();
}
inline void C_PLAYER_INFO::_internal_set_playerstate(::Protocol::PlayerState value) {
  
  playerstate_ = value;
}
inline void C_PLAYER_INFO::set_playerstate(::Protocol::PlayerState value) {
  _internal_set_playerstate(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAYER_INFO.playerState)
}

// .Protocol.PlayerDirection playerDir = 5;
inline void C_PLAYER_INFO::clear_playerdir() {
  playerdir_ = 0;
}
inline ::Protocol::PlayerDirection C_PLAYER_INFO::_internal_playerdir() const {
  return static_cast< ::Protocol::PlayerDirection >(playerdir_);
}
inline ::Protocol::PlayerDirection C_PLAYER_INFO::playerdir() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_INFO.playerDir)
  return _internal_playerdir();
}
inline void C_PLAYER_INFO::_internal_set_playerdir(::Protocol::PlayerDirection value) {
  
  playerdir_ = value;
}
inline void C_PLAYER_INFO::set_playerdir(::Protocol::PlayerDirection value) {
  _internal_set_playerdir(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAYER_INFO.playerDir)
}

// -------------------------------------------------------------------

// S_PLAYER_INFO

// uint64 id = 1;
inline void S_PLAYER_INFO::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_PLAYER_INFO::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_PLAYER_INFO::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_INFO.id)
  return _internal_id();
}
inline void S_PLAYER_INFO::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void S_PLAYER_INFO::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_INFO.id)
}

// int64 posX = 2;
inline void S_PLAYER_INFO::clear_posx() {
  posx_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_PLAYER_INFO::_internal_posx() const {
  return posx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_PLAYER_INFO::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_INFO.posX)
  return _internal_posx();
}
inline void S_PLAYER_INFO::_internal_set_posx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  posx_ = value;
}
inline void S_PLAYER_INFO::set_posx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_INFO.posX)
}

// int64 posY = 3;
inline void S_PLAYER_INFO::clear_posy() {
  posy_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_PLAYER_INFO::_internal_posy() const {
  return posy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_PLAYER_INFO::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_INFO.posY)
  return _internal_posy();
}
inline void S_PLAYER_INFO::_internal_set_posy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  posy_ = value;
}
inline void S_PLAYER_INFO::set_posy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_INFO.posY)
}

// -------------------------------------------------------------------

// C_OTHER_PLAYER_INFO

// uint64 id = 1;
inline void C_OTHER_PLAYER_INFO::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_OTHER_PLAYER_INFO::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_OTHER_PLAYER_INFO::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_OTHER_PLAYER_INFO.id)
  return _internal_id();
}
inline void C_OTHER_PLAYER_INFO::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void C_OTHER_PLAYER_INFO::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C_OTHER_PLAYER_INFO.id)
}

// int64 posX = 2;
inline void C_OTHER_PLAYER_INFO::clear_posx() {
  posx_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C_OTHER_PLAYER_INFO::_internal_posx() const {
  return posx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C_OTHER_PLAYER_INFO::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.C_OTHER_PLAYER_INFO.posX)
  return _internal_posx();
}
inline void C_OTHER_PLAYER_INFO::_internal_set_posx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  posx_ = value;
}
inline void C_OTHER_PLAYER_INFO::set_posx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.C_OTHER_PLAYER_INFO.posX)
}

// int64 posY = 3;
inline void C_OTHER_PLAYER_INFO::clear_posy() {
  posy_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C_OTHER_PLAYER_INFO::_internal_posy() const {
  return posy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 C_OTHER_PLAYER_INFO::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.C_OTHER_PLAYER_INFO.posY)
  return _internal_posy();
}
inline void C_OTHER_PLAYER_INFO::_internal_set_posy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  posy_ = value;
}
inline void C_OTHER_PLAYER_INFO::set_posy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.C_OTHER_PLAYER_INFO.posY)
}

// -------------------------------------------------------------------

// S_OTHER_PLAYER_INFO

// uint64 id = 1;
inline void S_OTHER_PLAYER_INFO::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_OTHER_PLAYER_INFO::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_OTHER_PLAYER_INFO::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OTHER_PLAYER_INFO.id)
  return _internal_id();
}
inline void S_OTHER_PLAYER_INFO::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void S_OTHER_PLAYER_INFO::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OTHER_PLAYER_INFO.id)
}

// int64 posX = 2;
inline void S_OTHER_PLAYER_INFO::clear_posx() {
  posx_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_OTHER_PLAYER_INFO::_internal_posx() const {
  return posx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_OTHER_PLAYER_INFO::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OTHER_PLAYER_INFO.posX)
  return _internal_posx();
}
inline void S_OTHER_PLAYER_INFO::_internal_set_posx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  posx_ = value;
}
inline void S_OTHER_PLAYER_INFO::set_posx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OTHER_PLAYER_INFO.posX)
}

// int64 posY = 3;
inline void S_OTHER_PLAYER_INFO::clear_posy() {
  posy_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_OTHER_PLAYER_INFO::_internal_posy() const {
  return posy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_OTHER_PLAYER_INFO::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OTHER_PLAYER_INFO.posY)
  return _internal_posy();
}
inline void S_OTHER_PLAYER_INFO::_internal_set_posy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  posy_ = value;
}
inline void S_OTHER_PLAYER_INFO::set_posy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OTHER_PLAYER_INFO.posY)
}

// .Protocol.PlayerState playerState = 4;
inline void S_OTHER_PLAYER_INFO::clear_playerstate() {
  playerstate_ = 0;
}
inline ::Protocol::PlayerState S_OTHER_PLAYER_INFO::_internal_playerstate() const {
  return static_cast< ::Protocol::PlayerState >(playerstate_);
}
inline ::Protocol::PlayerState S_OTHER_PLAYER_INFO::playerstate() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OTHER_PLAYER_INFO.playerState)
  return _internal_playerstate();
}
inline void S_OTHER_PLAYER_INFO::_internal_set_playerstate(::Protocol::PlayerState value) {
  
  playerstate_ = value;
}
inline void S_OTHER_PLAYER_INFO::set_playerstate(::Protocol::PlayerState value) {
  _internal_set_playerstate(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OTHER_PLAYER_INFO.playerState)
}

// .Protocol.PlayerDirection playerDir = 5;
inline void S_OTHER_PLAYER_INFO::clear_playerdir() {
  playerdir_ = 0;
}
inline ::Protocol::PlayerDirection S_OTHER_PLAYER_INFO::_internal_playerdir() const {
  return static_cast< ::Protocol::PlayerDirection >(playerdir_);
}
inline ::Protocol::PlayerDirection S_OTHER_PLAYER_INFO::playerdir() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OTHER_PLAYER_INFO.playerDir)
  return _internal_playerdir();
}
inline void S_OTHER_PLAYER_INFO::_internal_set_playerdir(::Protocol::PlayerDirection value) {
  
  playerdir_ = value;
}
inline void S_OTHER_PLAYER_INFO::set_playerdir(::Protocol::PlayerDirection value) {
  _internal_set_playerdir(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OTHER_PLAYER_INFO.playerDir)
}

// -------------------------------------------------------------------

// C_OTHER_PLAYER_ENTER

// uint64 numofother = 1;
inline void C_OTHER_PLAYER_ENTER::clear_numofother() {
  numofother_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_OTHER_PLAYER_ENTER::_internal_numofother() const {
  return numofother_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_OTHER_PLAYER_ENTER::numofother() const {
  // @@protoc_insertion_point(field_get:Protocol.C_OTHER_PLAYER_ENTER.numofother)
  return _internal_numofother();
}
inline void C_OTHER_PLAYER_ENTER::_internal_set_numofother(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  numofother_ = value;
}
inline void C_OTHER_PLAYER_ENTER::set_numofother(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_numofother(value);
  // @@protoc_insertion_point(field_set:Protocol.C_OTHER_PLAYER_ENTER.numofother)
}

// -------------------------------------------------------------------

// S_OTHER_PLAYER_ENTER

// uint64 id = 1;
inline void S_OTHER_PLAYER_ENTER::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_OTHER_PLAYER_ENTER::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_OTHER_PLAYER_ENTER::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OTHER_PLAYER_ENTER.id)
  return _internal_id();
}
inline void S_OTHER_PLAYER_ENTER::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void S_OTHER_PLAYER_ENTER::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OTHER_PLAYER_ENTER.id)
}

// int64 posX = 2;
inline void S_OTHER_PLAYER_ENTER::clear_posx() {
  posx_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_OTHER_PLAYER_ENTER::_internal_posx() const {
  return posx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_OTHER_PLAYER_ENTER::posx() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OTHER_PLAYER_ENTER.posX)
  return _internal_posx();
}
inline void S_OTHER_PLAYER_ENTER::_internal_set_posx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  posx_ = value;
}
inline void S_OTHER_PLAYER_ENTER::set_posx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OTHER_PLAYER_ENTER.posX)
}

// int64 posY = 3;
inline void S_OTHER_PLAYER_ENTER::clear_posy() {
  posy_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_OTHER_PLAYER_ENTER::_internal_posy() const {
  return posy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_OTHER_PLAYER_ENTER::posy() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OTHER_PLAYER_ENTER.posY)
  return _internal_posy();
}
inline void S_OTHER_PLAYER_ENTER::_internal_set_posy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  posy_ = value;
}
inline void S_OTHER_PLAYER_ENTER::set_posy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OTHER_PLAYER_ENTER.posY)
}

// -------------------------------------------------------------------

// C_PLAYER_DISCONNECT

// uint64 id = 1;
inline void C_PLAYER_DISCONNECT::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_PLAYER_DISCONNECT::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_PLAYER_DISCONNECT::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_DISCONNECT.id)
  return _internal_id();
}
inline void C_PLAYER_DISCONNECT::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void C_PLAYER_DISCONNECT::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAYER_DISCONNECT.id)
}

// bool disconnect = 2;
inline void C_PLAYER_DISCONNECT::clear_disconnect() {
  disconnect_ = false;
}
inline bool C_PLAYER_DISCONNECT::_internal_disconnect() const {
  return disconnect_;
}
inline bool C_PLAYER_DISCONNECT::disconnect() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PLAYER_DISCONNECT.disconnect)
  return _internal_disconnect();
}
inline void C_PLAYER_DISCONNECT::_internal_set_disconnect(bool value) {
  
  disconnect_ = value;
}
inline void C_PLAYER_DISCONNECT::set_disconnect(bool value) {
  _internal_set_disconnect(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PLAYER_DISCONNECT.disconnect)
}

// -------------------------------------------------------------------

// S_PLAYER_DISCONNECT

// uint64 id = 1;
inline void S_PLAYER_DISCONNECT::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_PLAYER_DISCONNECT::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_PLAYER_DISCONNECT::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_DISCONNECT.id)
  return _internal_id();
}
inline void S_PLAYER_DISCONNECT::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void S_PLAYER_DISCONNECT::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_DISCONNECT.id)
}

// bool disconnect = 2;
inline void S_PLAYER_DISCONNECT::clear_disconnect() {
  disconnect_ = false;
}
inline bool S_PLAYER_DISCONNECT::_internal_disconnect() const {
  return disconnect_;
}
inline bool S_PLAYER_DISCONNECT::disconnect() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYER_DISCONNECT.disconnect)
  return _internal_disconnect();
}
inline void S_PLAYER_DISCONNECT::_internal_set_disconnect(bool value) {
  
  disconnect_ = value;
}
inline void S_PLAYER_DISCONNECT::set_disconnect(bool value) {
  _internal_set_disconnect(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYER_DISCONNECT.disconnect)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
